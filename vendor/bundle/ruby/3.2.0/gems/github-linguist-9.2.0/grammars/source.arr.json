{"name":"Pyret","scopeName":"source.arr","patterns":[{"name":"keyword.other.delimiters.arr","match":"(!|-\u003e|=\u003e|:=|\\[|\\]|{|}|:\\s)"},{"name":"variable.arr","match":"(\\(|\\)|\\.|::|=)"},{"name":"storage.type.delimiters.arr","match":"(\\|)"},{"name":"entity.name.type.arr","match":"(?\u003c!-)(\\b|^)[A-Z][A-Za-z]*(?!-)(\\b|$)"},{"name":"keyword.operators.arr","match":"(?x)(?\u003c!-)(\\b|^) (end|block:|type|type-let|newtype|include|import|provide|provide-types|as| fun|lam|doc:|where:|check:|examples:| is==|is=~|is\u003c=\u003e|is-not==|is-not=~|is-not\u003c=\u003e|is|is-not|satisfies|violates| raises|does-not-raise|raises-violates|raises-satisfies|raises-other-than| data|with:|sharing:|deriving| for|from|and|or|not| if|else|when|cases|ask|then:|otherwise:) (?!-)(\\b|$)"},{"name":"storage.modifier.arr","match":"(?x)(?\u003c!-)(\\b|^) (var|ref|shadow|let|letrec|rec|method) (?!-)(\\b|$)"},{"name":"constant.language","match":"(?\u003c!-)(\\b|^)(true|false|nothing)(?!-)(\\b|$)"},{"name":"keyword.operator.arr","match":"( \\+ | - | \\/ | \\* | \u003e | \u003c | \u003e= | \u003c= | \u003c\u003e )"},{"name":"comment.block.arr","begin":"(#\\|)","end":"(\\|#)"},{"name":"comment.line.number-sign.arr","match":"#.*$"},{"name":"string.quoted.single.arr","match":"'[^']*'"},{"name":"string.quoted.double.arr","match":"\"[^\"]*\""},{"name":"string.quoted.triple.arr","begin":"```","end":"```"},{"name":"invalid.illegal","match":"'[^']*$"},{"name":"invalid.illegal","match":"\"[^\"]*$"},{"name":"constant.numeric.arr","match":"(?\u003c![a-zA-Z0-9_-])-?[0-9]+([/.][0-9]+)?"},{"name":"constant.other.arr","match":"(?\u003c![a-zA-Z0-9_-])~-?[0-9]+(\\.[0-9]+)?"}]}
