{"name":"Scenic","scopeName":"source.scenic","patterns":[{"include":"#statement"},{"include":"#expression"}],"repository":{"annotated-parameter":{"begin":"(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (:)\n","end":"(,)|(?=\\))","patterns":[{"include":"#expression"},{"name":"keyword.operator.assignment.scenic","match":"=(?!=)"}],"beginCaptures":{"1":{"name":"variable.parameter.function.language.scenic"},"2":{"name":"punctuation.separator.annotation.scenic"}},"endCaptures":{"1":{"name":"punctuation.separator.parameters.scenic"}}},"assignment-operator":{"name":"keyword.operator.assignment.scenic","match":"(?x)\n     \u003c\u003c= | \u003e\u003e= | //= | \\*\\*=\n    | \\+= | -= | /= | @=\n    | \\*= | %= | ~= | \\^= | \u0026= | \\|=\n    | =(?!=)\n"},"backticks":{"name":"invalid.deprecated.backtick.scenic","begin":"\\`","end":"(?:\\`|(?\u003c!\\\\)(\\n))","patterns":[{"include":"#expression"}]},"builtin-callables":{"patterns":[{"include":"#illegal-names"},{"include":"#illegal-object-name"},{"include":"#builtin-exceptions"},{"include":"#builtin-functions"},{"include":"#builtin-types"},{"include":"#builtin-types-scenic"}]},"builtin-exceptions":{"name":"support.type.exception.scenic","match":"(?x) (?\u003c!\\.) \\b(\n  (\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\n    | BrokenPipe | ChildProcess\n    | (Connection (Aborted | Refused | Reset)?)\n    | EOF | Environment | FileExists | FileNotFound\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\n    | Timeout\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\n    | Reference | Runtime | Recursion | Syntax | System\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\n    | Value | Windows | ZeroDivision | ModuleNotFound\n  ) Error\n|\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\n    | Unicode | Bytes | Resource\n  )? Warning\n|\n  SystemExit | Stop(Async)?Iteration\n  | KeyboardInterrupt\n  | GeneratorExit | (Base)?Exception\n  | (Guard | Precondition | Invariant)Violation\n)\\b\n"},"builtin-functions":{"patterns":[{"name":"support.function.builtin.scenic","match":"(?x)\n  (?\u003c!\\.) \\b(\n    __import__ | abs | aiter | all | any | anext | ascii | bin\n    | breakpoint | callable | chr | compile | copyright | credits\n    | delattr | dir | divmod | enumerate | eval | exec | exit\n    | filter | format | getattr | globals | hasattr | hash | help\n    | hex | id | input | isinstance | issubclass | iter | len\n    | license | locals | map | max | memoryview | min | next\n    | oct | open | ord | pow | print | quit | range | reload | repr\n    | reversed | round | setattr | sorted | sum | vars | zip\n  )\\b\n"},{"name":"support.function.builtin.scenic","match":"(?x)\n  (?\u003c!\\.) \\b(\n    resample | localPath | verbosePrint | simulation\n    | sin | cos | hypot\n  )\\b\n"},{"name":"variable.legacy.builtin.scenic","match":"(?x)\n  (?\u003c!\\.) \\b(\n    file | reduce | intern | raw_input | unicode | cmp | basestring\n    | execfile | long | xrange\n  )\\b\n"}]},"builtin-names-scenic":{"name":"support.constant.scenic","match":"(?x)\n  (?\u003c!\\.) \\b(\n    globalParameters\n  )\\b\n"},"builtin-possible-callables":{"patterns":[{"include":"#builtin-callables"},{"include":"#magic-names"}]},"builtin-types":{"name":"support.type.scenic","match":"(?x)\n  (?\u003c!\\.) \\b(\n    bool | bytearray | bytes | classmethod | complex | dict\n    | float | frozenset | int | list | object | property\n    | set | slice | staticmethod | str | tuple | type\n\n    (?# Although 'super' is not a type, it's related to types,\n        and is special enough to be highlighted differently from\n        other built-ins)\n    | super\n  )\\b\n"},"builtin-types-scenic":{"name":"support.type.scenic","match":"(?x)\n  (?\u003c!\\.) \\b(\n    Point | OrientedPoint | Object\n    | Vector | Orientation | VectorField | PolygonalVectorField\n    | Shape | MeshShape | BoxShape | CylinderShape | ConeShape | SpheroidShape\n    | Region | PointSetRegion | RectangularRegion | CircularRegion\n    | SectorRegion | PolygonalRegion | PolylineRegion | PathRegion\n    | MeshVolumeRegion | MeshSurfaceRegion | BoxRegion | SpheroidRegion\n    | Workspace\n    | Range | DiscreteRange | Options | Discrete | Uniform\n    | Normal | TruncatedNormal\n    | VerifaiParameter | VerifaiRange | VerifaiDiscreteRange | VerifaiOptions\n  )\\b\n"},"call-wrapper-inheritance":{"name":"meta.function-call.scenic","begin":"(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n","end":"(\\))","patterns":[{"include":"#inheritance-name"},{"include":"#function-arguments"}],"endCaptures":{"1":{"name":"punctuation.definition.arguments.end.scenic"}}},"class-declaration":{"patterns":[{"name":"meta.class.scenic","begin":"(?x)\n  \\s*(class)\\s+\n    (?=\n      [[:alpha:]_]\\w* \\s* (:|\\()\n    )\n","end":"(:)","patterns":[{"include":"#class-name"},{"include":"#class-inheritance"}],"beginCaptures":{"1":{"name":"storage.type.class.scenic"}},"endCaptures":{"1":{"name":"punctuation.section.class.begin.scenic"}}}]},"class-inheritance":{"name":"meta.class.inheritance.scenic","begin":"(\\()","end":"(\\))","patterns":[{"name":"keyword.operator.unpacking.arguments.scenic","match":"(\\*\\*|\\*)"},{"name":"punctuation.separator.inheritance.scenic","match":","},{"name":"keyword.operator.assignment.scenic","match":"=(?!=)"},{"name":"support.type.metaclass.scenic","match":"\\bmetaclass\\b"},{"include":"#illegal-names"},{"include":"#class-kwarg"},{"include":"#call-wrapper-inheritance"},{"include":"#expression-base"},{"include":"#member-access-class"},{"include":"#inheritance-identifier"}],"beginCaptures":{"1":{"name":"punctuation.definition.inheritance.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.inheritance.end.scenic"}}},"class-kwarg":{"match":"(?x)\n  \\b ([[:alpha:]_]\\w*) \\s*(=)(?!=)\n","captures":{"1":{"name":"entity.other.inherited-class.scenic variable.parameter.class.scenic"},"2":{"name":"keyword.operator.assignment.scenic"}}},"class-name":{"patterns":[{"include":"#illegal-object-name"},{"include":"#builtin-possible-callables"},{"name":"entity.name.type.class.scenic","match":"(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"}]},"codetags":{"match":"(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)","captures":{"1":{"name":"keyword.codetag.notation.scenic"}}},"comments":{"patterns":[{"name":"comment.line.number-sign.scenic","contentName":"meta.typehint.comment.scenic","begin":"(?x)\n  (?:\n    \\# \\s* (type:)\n    \\s*+ (?# we want `\\s*+` which is possessive quantifier since\n             we do not actually want to backtrack when matching\n             whitespace here)\n    (?! $ | \\#)\n  )\n","end":"(?:$|(?=\\#))","patterns":[{"name":"comment.typehint.ignore.notation.scenic","match":"(?x)\n  \\G ignore\n  (?= \\s* (?: $ | \\#))\n"},{"name":"comment.typehint.type.notation.scenic","match":"(?x)\n  (?\u003c!\\.)\\b(\n    bool | bytes | float | int | object | str\n    | List | Dict | Iterable | Sequence | Set\n    | FrozenSet | Callable | Union | Tuple\n    | Any | None\n  )\\b\n"},{"name":"comment.typehint.punctuation.notation.scenic","match":"([\\[\\]\\(\\),\\.\\=\\*]|(-\u003e))"},{"name":"comment.typehint.variable.notation.scenic","match":"([[:alpha:]_]\\w*)"}],"beginCaptures":{"0":{"name":"meta.typehint.comment.scenic"},"1":{"name":"comment.typehint.directive.notation.scenic"}}},{"include":"#comments-base"}]},"comments-base":{"name":"comment.line.number-sign.scenic","begin":"(\\#)","end":"($)","patterns":[{"include":"#codetags"}],"beginCaptures":{"1":{"name":"punctuation.definition.comment.scenic"}}},"comments-string-double-three":{"name":"comment.line.number-sign.scenic","begin":"(\\#)","end":"($|(?=\"\"\"))","patterns":[{"include":"#codetags"}],"beginCaptures":{"1":{"name":"punctuation.definition.comment.scenic"}}},"comments-string-single-three":{"name":"comment.line.number-sign.scenic","begin":"(\\#)","end":"($|(?='''))","patterns":[{"include":"#codetags"}],"beginCaptures":{"1":{"name":"punctuation.definition.comment.scenic"}}},"curly-braces":{"begin":"\\{","end":"\\}","patterns":[{"name":"punctuation.separator.dict.scenic","match":":"},{"include":"#expression"}],"beginCaptures":{"0":{"name":"punctuation.definition.dict.begin.scenic"}},"endCaptures":{"0":{"name":"punctuation.definition.dict.end.scenic"}}},"decorator":{"name":"meta.function.decorator.scenic","begin":"(?x)\n  ^\\s*\n  ((@)) \\s* (?=[[:alpha:]_]\\w*)\n","end":"(?x)\n  ( \\) )\n    # trailing whitespace and comments are legal\n    (?: (.*?) (?=\\s*(?:\\#|$)) )\n  | (?=\\n|\\#)\n","patterns":[{"include":"#decorator-name"},{"include":"#function-arguments"}],"beginCaptures":{"1":{"name":"entity.name.function.decorator.scenic"},"2":{"name":"punctuation.definition.decorator.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.arguments.end.scenic"},"2":{"name":"invalid.illegal.decorator.scenic"}}},"decorator-name":{"patterns":[{"include":"#builtin-callables"},{"include":"#illegal-object-name"},{"name":"entity.name.function.decorator.scenic","match":"(?x)\n  ([[:alpha:]_]\\w*) | (\\.)\n","captures":{"2":{"name":"punctuation.separator.period.scenic"}}},{"include":"#line-continuation"},{"name":"invalid.illegal.decorator.scenic","match":"(?x)\n  \\s* ([^([:alpha:]\\s_\\.#\\\\] .*?) (?=\\#|$)\n","captures":{"1":{"name":"invalid.illegal.decorator.scenic"}}}]},"docstring":{"patterns":[{"name":"string.quoted.docstring.multi.scenic","begin":"(\\'\\'\\'|\\\"\\\"\\\")","end":"(\\1)","patterns":[{"include":"#docstring-prompt"},{"include":"#codetags"},{"include":"#docstring-guts-unicode"}],"beginCaptures":{"1":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"}}},{"name":"string.quoted.docstring.raw.multi.scenic","begin":"([rR])(\\'\\'\\'|\\\"\\\"\\\")","end":"(\\2)","patterns":[{"include":"#string-consume-escape"},{"include":"#docstring-prompt"},{"include":"#codetags"}],"beginCaptures":{"1":{"name":"storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"}}},{"name":"string.quoted.docstring.single.scenic","begin":"(\\'|\\\")","end":"(\\1)|(\\n)","patterns":[{"include":"#codetags"},{"include":"#docstring-guts-unicode"}],"beginCaptures":{"1":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},{"name":"string.quoted.docstring.raw.single.scenic","begin":"([rR])(\\'|\\\")","end":"(\\2)|(\\n)","patterns":[{"include":"#string-consume-escape"},{"include":"#codetags"}],"beginCaptures":{"1":{"name":"storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}}]},"docstring-guts-unicode":{"patterns":[{"include":"#escape-sequence-unicode"},{"include":"#escape-sequence"},{"include":"#string-line-continuation"}]},"docstring-prompt":{"match":"(?x)\n  (?:\n    (?:^|\\G) \\s* (?# '\\G' is necessary for ST)\n    ((?:\u003e\u003e\u003e|\\.\\.\\.) \\s) (?=\\s*\\S)\n  )\n","captures":{"1":{"name":"keyword.control.flow.scenic"}}},"docstring-statement":{"begin":"^(?=\\s*[rR]?(\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))","end":"((?\u003c=\\1)|^)(?!\\s*[rR]?(\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))","patterns":[{"include":"#docstring"}]},"double-one-regexp-character-set":{"patterns":[{"match":"(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"},{"name":"meta.character.set.regexp","begin":"(\\[)(\\^)?(\\])?","end":"(\\]|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#regexp-charecter-set-escapes"},{"name":"constant.character.set.regexp","match":"[^\\n]"}],"beginCaptures":{"1":{"name":"punctuation.character.set.begin.regexp constant.other.set.regexp"},"2":{"name":"keyword.operator.negation.regexp"},"3":{"name":"constant.character.set.regexp"}},"endCaptures":{"1":{"name":"punctuation.character.set.end.regexp constant.other.set.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}}]},"double-one-regexp-comments":{"name":"comment.regexp","begin":"\\(\\?#","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#codetags"}],"beginCaptures":{"0":{"name":"punctuation.comment.begin.regexp"}},"endCaptures":{"1":{"name":"punctuation.comment.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-conditional":{"begin":"(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.conditional.regexp"},"1":{"name":"punctuation.parenthesis.conditional.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-expression":{"patterns":[{"include":"#regexp-base-expression"},{"include":"#double-one-regexp-character-set"},{"include":"#double-one-regexp-comments"},{"include":"#regexp-flags"},{"include":"#double-one-regexp-named-group"},{"include":"#regexp-backreference"},{"include":"#double-one-regexp-lookahead"},{"include":"#double-one-regexp-lookahead-negative"},{"include":"#double-one-regexp-lookbehind"},{"include":"#double-one-regexp-lookbehind-negative"},{"include":"#double-one-regexp-conditional"},{"include":"#double-one-regexp-parentheses-non-capturing"},{"include":"#double-one-regexp-parentheses"}]},"double-one-regexp-lookahead":{"begin":"(\\()\\?=","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-lookahead-negative":{"begin":"(\\()\\?!","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-lookbehind":{"begin":"(\\()\\?\u003c=","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-lookbehind-negative":{"begin":"(\\()\\?\u003c!","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-named-group":{"name":"meta.named.regexp","begin":"(?x)\n  (\\()  (\\?P \u003c\\w+(?:\\s+[[:alnum:]]+)?\u003e)\n","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"},"2":{"name":"entity.name.tag.named.group.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-parentheses":{"begin":"\\(","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-one-regexp-parentheses-non-capturing":{"begin":"\\(\\?:","end":"(\\)|(?=\"))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-character-set":{"patterns":[{"match":"(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"},{"name":"meta.character.set.regexp","begin":"(\\[)(\\^)?(\\])?","end":"(\\]|(?=\"\"\"))","patterns":[{"include":"#regexp-charecter-set-escapes"},{"name":"constant.character.set.regexp","match":"[^\\n]"}],"beginCaptures":{"1":{"name":"punctuation.character.set.begin.regexp constant.other.set.regexp"},"2":{"name":"keyword.operator.negation.regexp"},"3":{"name":"constant.character.set.regexp"}},"endCaptures":{"1":{"name":"punctuation.character.set.end.regexp constant.other.set.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}}]},"double-three-regexp-comments":{"name":"comment.regexp","begin":"\\(\\?#","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#codetags"}],"beginCaptures":{"0":{"name":"punctuation.comment.begin.regexp"}},"endCaptures":{"1":{"name":"punctuation.comment.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-conditional":{"begin":"(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"0":{"name":"keyword.operator.conditional.regexp"},"1":{"name":"punctuation.parenthesis.conditional.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-expression":{"patterns":[{"include":"#regexp-base-expression"},{"include":"#double-three-regexp-character-set"},{"include":"#double-three-regexp-comments"},{"include":"#regexp-flags"},{"include":"#double-three-regexp-named-group"},{"include":"#regexp-backreference"},{"include":"#double-three-regexp-lookahead"},{"include":"#double-three-regexp-lookahead-negative"},{"include":"#double-three-regexp-lookbehind"},{"include":"#double-three-regexp-lookbehind-negative"},{"include":"#double-three-regexp-conditional"},{"include":"#double-three-regexp-parentheses-non-capturing"},{"include":"#double-three-regexp-parentheses"},{"include":"#comments-string-double-three"}]},"double-three-regexp-lookahead":{"begin":"(\\()\\?=","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-lookahead-negative":{"begin":"(\\()\\?!","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-lookbehind":{"begin":"(\\()\\?\u003c=","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-lookbehind-negative":{"begin":"(\\()\\?\u003c!","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-named-group":{"name":"meta.named.regexp","begin":"(?x)\n  (\\()  (\\?P \u003c\\w+(?:\\s+[[:alnum:]]+)?\u003e)\n","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"},"2":{"name":"entity.name.tag.named.group.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-parentheses":{"begin":"\\(","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"double-three-regexp-parentheses-non-capturing":{"begin":"\\(\\?:","end":"(\\)|(?=\"\"\"))","patterns":[{"include":"#double-three-regexp-expression"},{"include":"#comments-string-double-three"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"ellipsis":{"name":"constant.other.ellipsis.scenic","match":"\\.\\.\\."},"escape-sequence":{"name":"constant.character.escape.scenic","match":"(?x)\n  \\\\ (\n        x[0-9A-Fa-f]{2}\n        | [0-7]{1,3}\n        | [\\\\\"'abfnrtv]\n     )\n"},"escape-sequence-unicode":{"patterns":[{"name":"constant.character.escape.scenic","match":"(?x)\n  \\\\ (\n        u[0-9A-Fa-f]{4}\n        | U[0-9A-Fa-f]{8}\n        | N\\{[\\w\\s]+?\\}\n     )\n"}]},"expression":{"patterns":[{"include":"#expression-base"},{"include":"#member-access"},{"match":"(?x) \\b ([[:alpha:]_]\\w*) \\b"}]},"expression-bare":{"patterns":[{"include":"#backticks"},{"include":"#illegal-anno"},{"include":"#literal"},{"include":"#regexp"},{"include":"#string"},{"include":"#lambda"},{"include":"#inline-keywords"},{"include":"#illegal-operator"},{"include":"#operator"},{"include":"#curly-braces"},{"include":"#item-access"},{"include":"#list"},{"include":"#round-braces"},{"include":"#function-call"},{"include":"#instance-creation"},{"include":"#builtin-functions"},{"include":"#builtin-types"},{"include":"#builtin-types-scenic"},{"include":"#builtin-exceptions"},{"include":"#magic-names"},{"include":"#special-names"},{"include":"#builtin-names-scenic"},{"include":"#illegal-names"},{"include":"#special-variables"},{"include":"#ellipsis"},{"include":"#punctuation"},{"include":"#line-continuation"}]},"expression-base":{"patterns":[{"include":"#comments"},{"include":"#expression-bare"},{"include":"#line-continuation"}]},"f-expression":{"patterns":[{"include":"#expression-bare"},{"include":"#member-access"},{"match":"(?x) \\b ([[:alpha:]_]\\w*) \\b"}]},"fregexp-base-expression":{"patterns":[{"include":"#fregexp-quantifier"},{"include":"#fstring-formatting-braces"},{"match":"\\{.*?\\}"},{"include":"#regexp-base-common"}]},"fregexp-quantifier":{"name":"keyword.operator.quantifier.regexp","match":"(?x)\n  \\{\\{(\n    \\d+ | \\d+,(\\d+)? | ,\\d+\n  )\\}\\}\n"},"fstring-fnorm-quoted-multi-line":{"name":"meta.fstring.scenic","begin":"(\\b[fF])([bBuU])?('''|\"\"\")","end":"(\\3)","patterns":[{"include":"#fstring-guts"},{"include":"#fstring-illegal-multi-brace"},{"include":"#fstring-multi-brace"},{"include":"#fstring-multi-core"}],"beginCaptures":{"1":{"name":"string.interpolated.scenic string.quoted.multi.scenic storage.type.string.scenic"},"2":{"name":"invalid.illegal.prefix.scenic"},"3":{"name":"punctuation.definition.string.begin.scenic string.interpolated.scenic string.quoted.multi.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic string.interpolated.scenic string.quoted.multi.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"fstring-fnorm-quoted-single-line":{"name":"meta.fstring.scenic","begin":"(\\b[fF])([bBuU])?((['\"]))","end":"(\\3)|((?\u003c!\\\\)\\n)","patterns":[{"include":"#fstring-guts"},{"include":"#fstring-illegal-single-brace"},{"include":"#fstring-single-brace"},{"include":"#fstring-single-core"}],"beginCaptures":{"1":{"name":"string.interpolated.scenic string.quoted.single.scenic storage.type.string.scenic"},"2":{"name":"invalid.illegal.prefix.scenic"},"3":{"name":"punctuation.definition.string.begin.scenic string.interpolated.scenic string.quoted.single.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic string.interpolated.scenic string.quoted.single.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"fstring-formatting":{"patterns":[{"include":"#fstring-formatting-braces"},{"include":"#fstring-formatting-singe-brace"}]},"fstring-formatting-braces":{"patterns":[{"match":"({)(\\s*?)(})","captures":{"1":{"name":"constant.character.format.placeholder.other.scenic"},"2":{"name":"invalid.illegal.brace.scenic"},"3":{"name":"constant.character.format.placeholder.other.scenic"}}},{"name":"constant.character.escape.scenic","match":"({{|}})"}]},"fstring-formatting-singe-brace":{"name":"invalid.illegal.brace.scenic","match":"(}(?!}))"},"fstring-guts":{"patterns":[{"include":"#escape-sequence-unicode"},{"include":"#escape-sequence"},{"include":"#string-line-continuation"},{"include":"#fstring-formatting"}]},"fstring-illegal-multi-brace":{"patterns":[{"include":"#impossible"}]},"fstring-illegal-single-brace":{"begin":"(\\{)(?=[^\\n}]*$\\n?)","end":"(\\})|(?=\\n)","patterns":[{"include":"#fstring-terminator-single"},{"include":"#f-expression"}],"beginCaptures":{"1":{"name":"constant.character.format.placeholder.other.scenic"}},"endCaptures":{"1":{"name":"constant.character.format.placeholder.other.scenic"}}},"fstring-multi-brace":{"begin":"(\\{)","end":"(?x)\n  (\\})\n","patterns":[{"include":"#fstring-terminator-multi"},{"include":"#f-expression"}],"beginCaptures":{"1":{"name":"constant.character.format.placeholder.other.scenic"}},"endCaptures":{"1":{"name":"constant.character.format.placeholder.other.scenic"}}},"fstring-multi-core":{"name":"string.interpolated.scenic string.quoted.multi.scenic","match":"(?x)\n  (.+?)\n    (\n      (?# .* and .*? in multi-line match need special handling of\n        newlines otherwise SublimeText and Atom will match slightly\n        differently.\n\n        The guard for newlines has to be separate from the\n        lookahead because of special $ matching rule.)\n      ($\\n?)\n      |\n      (?=[\\\\\\}\\{]|'''|\"\"\")\n    )\n  (?# due to how multiline regexps are matched we need a special case\n    for matching a newline character)\n  | \\n\n"},"fstring-normf-quoted-multi-line":{"name":"meta.fstring.scenic","begin":"(\\b[bBuU])([fF])('''|\"\"\")","end":"(\\3)","patterns":[{"include":"#fstring-guts"},{"include":"#fstring-illegal-multi-brace"},{"include":"#fstring-multi-brace"},{"include":"#fstring-multi-core"}],"beginCaptures":{"1":{"name":"invalid.illegal.prefix.scenic"},"2":{"name":"string.interpolated.scenic string.quoted.multi.scenic storage.type.string.scenic"},"3":{"name":"punctuation.definition.string.begin.scenic string.quoted.multi.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic string.interpolated.scenic string.quoted.multi.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"fstring-normf-quoted-single-line":{"name":"meta.fstring.scenic","begin":"(\\b[bBuU])([fF])((['\"]))","end":"(\\3)|((?\u003c!\\\\)\\n)","patterns":[{"include":"#fstring-guts"},{"include":"#fstring-illegal-single-brace"},{"include":"#fstring-single-brace"},{"include":"#fstring-single-core"}],"beginCaptures":{"1":{"name":"invalid.illegal.prefix.scenic"},"2":{"name":"string.interpolated.scenic string.quoted.single.scenic storage.type.string.scenic"},"3":{"name":"punctuation.definition.string.begin.scenic string.quoted.single.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic string.interpolated.scenic string.quoted.single.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"fstring-raw-guts":{"patterns":[{"include":"#string-consume-escape"},{"include":"#fstring-formatting"}]},"fstring-raw-multi-core":{"name":"string.interpolated.scenic string.quoted.raw.multi.scenic","match":"(?x)\n  (.+?)\n    (\n      (?# .* and .*? in multi-line match need special handling of\n        newlines otherwise SublimeText and Atom will match slightly\n        differently.\n\n        The guard for newlines has to be separate from the\n        lookahead because of special $ matching rule.)\n      ($\\n?)\n      |\n      (?=[\\\\\\}\\{]|'''|\"\"\")\n    )\n  (?# due to how multiline regexps are matched we need a special case\n    for matching a newline character)\n  | \\n\n"},"fstring-raw-quoted-multi-line":{"name":"meta.fstring.scenic","begin":"(\\b(?:[rR][fF]|[fF][rR]))('''|\"\"\")","end":"(\\2)","patterns":[{"include":"#fstring-raw-guts"},{"include":"#fstring-illegal-multi-brace"},{"include":"#fstring-multi-brace"},{"include":"#fstring-raw-multi-core"}],"beginCaptures":{"1":{"name":"string.interpolated.scenic string.quoted.raw.multi.scenic storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic string.quoted.raw.multi.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic string.interpolated.scenic string.quoted.raw.multi.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"fstring-raw-quoted-single-line":{"name":"meta.fstring.scenic","begin":"(\\b(?:[rR][fF]|[fF][rR]))((['\"]))","end":"(\\2)|((?\u003c!\\\\)\\n)","patterns":[{"include":"#fstring-raw-guts"},{"include":"#fstring-illegal-single-brace"},{"include":"#fstring-single-brace"},{"include":"#fstring-raw-single-core"}],"beginCaptures":{"1":{"name":"string.interpolated.scenic string.quoted.raw.single.scenic storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic string.quoted.raw.single.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic string.interpolated.scenic string.quoted.raw.single.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"fstring-raw-single-core":{"name":"string.interpolated.scenic string.quoted.raw.single.scenic","match":"(?x)\n  (.+?)\n    (\n      (?# .* and .*? in multi-line match need special handling of\n        newlines otherwise SublimeText and Atom will match slightly\n        differently.\n\n        The guard for newlines has to be separate from the\n        lookahead because of special $ matching rule.)\n      ($\\n?)\n      |\n      (?=[\\\\\\}\\{]|(['\"])|((?\u003c!\\\\)\\n))\n    )\n  (?# due to how multiline regexps are matched we need a special case\n    for matching a newline character)\n  | \\n\n"},"fstring-single-brace":{"begin":"(\\{)","end":"(?x)\n  (\\})|(?=\\n)\n","patterns":[{"include":"#fstring-terminator-single"},{"include":"#f-expression"}],"beginCaptures":{"1":{"name":"constant.character.format.placeholder.other.scenic"}},"endCaptures":{"1":{"name":"constant.character.format.placeholder.other.scenic"}}},"fstring-single-core":{"name":"string.interpolated.scenic string.quoted.single.scenic","match":"(?x)\n  (.+?)\n    (\n      (?# .* and .*? in multi-line match need special handling of\n        newlines otherwise SublimeText and Atom will match slightly\n        differently.\n\n        The guard for newlines has to be separate from the\n        lookahead because of special $ matching rule.)\n      ($\\n?)\n      |\n      (?=[\\\\\\}\\{]|(['\"])|((?\u003c!\\\\)\\n))\n    )\n  (?# due to how multiline regexps are matched we need a special case\n    for matching a newline character)\n  | \\n\n"},"fstring-terminator-multi":{"patterns":[{"name":"storage.type.format.scenic","match":"(=(![rsa])?)(?=})"},{"name":"storage.type.format.scenic","match":"(=?![rsa])(?=})"},{"match":"(?x)\n  ( (?: =?) (?: ![rsa])? )\n    ( : \\w? [\u003c\u003e=^]? [-+ ]? \\#?\n      \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )(?=})\n","captures":{"1":{"name":"storage.type.format.scenic"},"2":{"name":"storage.type.format.scenic"}}},{"include":"#fstring-terminator-multi-tail"}]},"fstring-terminator-multi-tail":{"begin":"((?:=?)(?:![rsa])?)(:)(?=.*?{)","end":"(?=})","patterns":[{"include":"#fstring-illegal-multi-brace"},{"include":"#fstring-multi-brace"},{"name":"storage.type.format.scenic","match":"([bcdeEfFgGnosxX%])(?=})"},{"name":"storage.type.format.scenic","match":"(\\.\\d+)"},{"name":"storage.type.format.scenic","match":"(,)"},{"name":"storage.type.format.scenic","match":"(\\d+)"},{"name":"storage.type.format.scenic","match":"(\\#)"},{"name":"storage.type.format.scenic","match":"([-+ ])"},{"name":"storage.type.format.scenic","match":"([\u003c\u003e=^])"},{"name":"storage.type.format.scenic","match":"(\\w)"}],"beginCaptures":{"1":{"name":"storage.type.format.scenic"},"2":{"name":"storage.type.format.scenic"}}},"fstring-terminator-single":{"patterns":[{"name":"storage.type.format.scenic","match":"(=(![rsa])?)(?=})"},{"name":"storage.type.format.scenic","match":"(=?![rsa])(?=})"},{"match":"(?x)\n  ( (?: =?) (?: ![rsa])? )\n    ( : \\w? [\u003c\u003e=^]? [-+ ]? \\#?\n      \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )(?=})\n","captures":{"1":{"name":"storage.type.format.scenic"},"2":{"name":"storage.type.format.scenic"}}},{"include":"#fstring-terminator-single-tail"}]},"fstring-terminator-single-tail":{"begin":"((?:=?)(?:![rsa])?)(:)(?=.*?{)","end":"(?=})|(?=\\n)","patterns":[{"include":"#fstring-illegal-single-brace"},{"include":"#fstring-single-brace"},{"name":"storage.type.format.scenic","match":"([bcdeEfFgGnosxX%])(?=})"},{"name":"storage.type.format.scenic","match":"(\\.\\d+)"},{"name":"storage.type.format.scenic","match":"(,)"},{"name":"storage.type.format.scenic","match":"(\\d+)"},{"name":"storage.type.format.scenic","match":"(\\#)"},{"name":"storage.type.format.scenic","match":"([-+ ])"},{"name":"storage.type.format.scenic","match":"([\u003c\u003e=^])"},{"name":"storage.type.format.scenic","match":"(\\w)"}],"beginCaptures":{"1":{"name":"storage.type.format.scenic"},"2":{"name":"storage.type.format.scenic"}}},"function-arguments":{"contentName":"meta.function-call.arguments.scenic","begin":"(\\()","end":"(?=\\))(?!\\)\\s*\\()","patterns":[{"name":"punctuation.separator.arguments.scenic","match":"(,)"},{"match":"(?x)\n  (?:(?\u003c=[,(])|^) \\s* (\\*{1,2})\n","captures":{"1":{"name":"keyword.operator.unpacking.arguments.scenic"}}},{"include":"#lambda-incomplete"},{"include":"#illegal-names"},{"match":"\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)","captures":{"1":{"name":"variable.parameter.function-call.scenic"},"2":{"name":"keyword.operator.assignment.scenic"}}},{"name":"keyword.operator.assignment.scenic","match":"=(?!=)"},{"include":"#expression"},{"match":"\\s*(\\))\\s*(\\()","captures":{"1":{"name":"punctuation.definition.arguments.end.scenic"},"2":{"name":"punctuation.definition.arguments.begin.scenic"}}}],"beginCaptures":{"1":{"name":"punctuation.definition.arguments.begin.scenic"}}},"function-call":{"name":"meta.function-call.scenic","begin":"(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n","end":"(\\))","patterns":[{"include":"#special-variables"},{"include":"#function-name"},{"include":"#function-arguments"}],"endCaptures":{"1":{"name":"punctuation.definition.arguments.end.scenic"}}},"function-declaration":{"name":"meta.function.scenic","begin":"(?x)\n  \\s*\n  (?:\\b(async) \\s+)? \\b(def)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n","end":"(:|(?=[#'\"\\n]))","patterns":[{"include":"#function-def-name"},{"include":"#parameters"},{"include":"#line-continuation"},{"include":"#return-annotation"}],"beginCaptures":{"1":{"name":"storage.type.function.async.scenic"},"2":{"name":"storage.type.function.scenic"}},"endCaptures":{"1":{"name":"punctuation.section.function.begin.scenic"}}},"function-def-name":{"patterns":[{"include":"#illegal-object-name"},{"include":"#builtin-possible-callables"},{"name":"entity.name.function.scenic","match":"(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"}]},"function-name":{"patterns":[{"include":"#builtin-possible-callables"},{"name":"variable.function.scenic meta.function-call.generic.scenic","match":"(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"}]},"illegal-anno":{"name":"invalid.illegal.annotation.scenic","match":"-\u003e"},"illegal-names":{"match":"(?x)\n  \\b(?:\n    (\n      and | as | assert | async | await | break | class | continue | def\n      | del | elif | else | except | finally | for | from | global\n      | if | in | is | (?\u003c=\\.)lambda | lambda(?=\\s*[\\.=])\n      | nonlocal | not | or | pass | raise | return | try | while | with\n      | yield\n      | at | by | do | of | to | until\n    ) | (\n      import\n    )\n  )\\b\n","captures":{"1":{"name":"keyword.control.flow.scenic"},"2":{"name":"keyword.control.import.scenic"}}},"illegal-object-name":{"name":"keyword.illegal.name.scenic","match":"\\b(True|False|None)\\b"},"illegal-operator":{"patterns":[{"name":"invalid.illegal.operator.scenic","match":"\u0026\u0026|\\|\\||--|\\+\\+"},{"name":"invalid.illegal.operator.scenic","match":"[?$]"},{"name":"invalid.illegal.operator.scenic","match":"!\\b"}]},"import":{"patterns":[{"match":"(?x)\n  \\s* \\b(from) \\s*(\\.+)\\s* (import\\b)?\n","captures":{"1":{"name":"keyword.control.import.scenic"},"2":{"name":"punctuation.separator.period.scenic"},"3":{"name":"keyword.control.import.scenic"}}},{"name":"keyword.control.import.scenic","match":"\\b(?\u003c!\\.)import\\b"}]},"impossible":{"match":"$.^"},"inheritance-identifier":{"match":"(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n","captures":{"1":{"name":"entity.other.inherited-class.scenic"}}},"inheritance-name":{"patterns":[{"include":"#lambda-incomplete"},{"include":"#builtin-possible-callables"},{"include":"#inheritance-identifier"}]},"inline-keywords":{"match":"(?x)\n  \\b(?\u003c!\\.)(\n    initial\\ scenario | until | to | by | from\n  )\\b\n","captures":{"1":{"name":"keyword.control.flow.scenic"}}},"instance-creation":{"name":"meta.instance.scenic","begin":"(?x)\n  (new) \\s+\n  (?: (Point | OrientedPoint | Object)\\b | ([[:alpha:]_]\\w*))\n  [^\\S\\n]*\n","end":"(?=[\\S\\n])","patterns":[{"include":"#specifier"},{"include":"#line-continuation"}],"beginCaptures":{"1":{"name":"keyword.other.new.scenic"},"2":{"name":"markup.italic markup.bold entity.name.instance.scenic"},"3":{"name":"markup.bold entity.name.instance.scenic"}},"endCaptures":{"1":{"name":"comment.line.number-sign.scenic"}},"applyEndPatternLast":true},"item-access":{"patterns":[{"name":"meta.item-access.scenic","begin":"(?x)\n  \\b(?=\n    [[:alpha:]_]\\w* \\s* \\[\n  )\n","end":"(\\])","patterns":[{"include":"#item-name"},{"include":"#item-index"},{"include":"#expression"}],"endCaptures":{"1":{"name":"punctuation.definition.arguments.end.scenic"}}}]},"item-index":{"contentName":"meta.item-access.arguments.scenic","begin":"(\\[)","end":"(?=\\])","patterns":[{"name":"punctuation.separator.slice.scenic","match":":"},{"include":"#expression"}],"beginCaptures":{"1":{"name":"punctuation.definition.arguments.begin.scenic"}}},"item-name":{"patterns":[{"include":"#special-variables"},{"include":"#builtin-functions"},{"include":"#special-names"},{"match":"(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"}]},"lambda":{"patterns":[{"match":"((?\u003c=\\.)lambda|lambda(?=\\s*[\\.=]))","captures":{"1":{"name":"keyword.control.flow.scenic"}}},{"match":"\\b(lambda)\\s*?(?=[,\\n]|$)","captures":{"1":{"name":"storage.type.function.lambda.scenic"}}},{"name":"meta.lambda-function.scenic","contentName":"meta.function.lambda.parameters.scenic","begin":"(?x)\n  \\b (lambda) \\b\n","end":"(:)|(\\n)","patterns":[{"name":"keyword.operator.positional.parameter.scenic","match":"/"},{"name":"keyword.operator.unpacking.parameter.scenic","match":"(\\*\\*|\\*)"},{"include":"#lambda-nested-incomplete"},{"include":"#illegal-names"},{"match":"([[:alpha:]_]\\w*)\\s*(?:(,)|(?=:|$))","captures":{"1":{"name":"variable.parameter.function.language.scenic"},"2":{"name":"punctuation.separator.parameters.scenic"}}},{"include":"#comments"},{"include":"#backticks"},{"include":"#illegal-anno"},{"include":"#lambda-parameter-with-default"},{"include":"#line-continuation"},{"include":"#illegal-operator"}],"beginCaptures":{"1":{"name":"storage.type.function.lambda.scenic"}},"endCaptures":{"1":{"name":"punctuation.section.function.lambda.begin.scenic"}}}]},"lambda-incomplete":{"name":"storage.type.function.lambda.scenic","match":"\\blambda(?=\\s*[,)])"},"lambda-nested-incomplete":{"name":"storage.type.function.lambda.scenic","match":"\\blambda(?=\\s*[:,)])"},"lambda-parameter-with-default":{"begin":"(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (=)\n","end":"(,)|(?=:|$)","patterns":[{"include":"#expression"}],"beginCaptures":{"1":{"name":"variable.parameter.function.language.scenic"},"2":{"name":"keyword.operator.scenic"}},"endCaptures":{"1":{"name":"punctuation.separator.parameters.scenic"}}},"line-continuation":{"patterns":[{"match":"(\\\\)\\s*(\\S.*$\\n?)","captures":{"1":{"name":"punctuation.separator.continuation.line.scenic"},"2":{"name":"invalid.illegal.line.continuation.scenic"}}},{"begin":"(\\\\)\\s*$\\n?","end":"(?x)\n  (?=^\\s*$)\n  |\n  (?! (\\s* [rR]? (\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))\n      |\n      (\\G $)  (?# '\\G' is necessary for ST)\n  )\n","patterns":[{"include":"#regexp"},{"include":"#string"}],"beginCaptures":{"1":{"name":"punctuation.separator.continuation.line.scenic"}}}]},"list":{"begin":"\\[","end":"\\]","patterns":[{"include":"#expression"}],"beginCaptures":{"0":{"name":"punctuation.definition.list.begin.scenic"}},"endCaptures":{"0":{"name":"punctuation.definition.list.end.scenic"}}},"literal":{"patterns":[{"name":"constant.language.scenic","match":"\\b(True|False|None|NotImplemented|Ellipsis)\\b"},{"name":"constant.language.scenic","match":"\\b(everywhere|nowhere)\\b"},{"include":"#number"}]},"loose-default":{"begin":"(=)","end":"(,)|(?=\\))","patterns":[{"include":"#expression"}],"beginCaptures":{"1":{"name":"keyword.operator.scenic"}},"endCaptures":{"1":{"name":"punctuation.separator.parameters.scenic"}}},"magic-function-names":{"match":"(?x)\n  \\b(\n    __(?:\n      abs | add | aenter | aexit | aiter | and | anext\n      | await | bool | call | ceil | class_getitem\n      | cmp | coerce | complex | contains | copy\n      | deepcopy | del | delattr | delete | delitem\n      | delslice | dir | div | divmod | enter | eq\n      | exit | float | floor | floordiv | format | ge\n      | get | getattr | getattribute | getinitargs\n      | getitem | getnewargs | getslice | getstate | gt\n      | hash | hex | iadd | iand | idiv | ifloordiv |\n      | ilshift | imod | imul | index | init\n      | instancecheck | int | invert | ior | ipow\n      | irshift | isub | iter | itruediv | ixor | le\n      | len | long | lshift | lt | missing | mod | mul\n      | ne | neg | new | next | nonzero | oct | or | pos\n      | pow | radd | rand | rdiv | rdivmod | reduce\n      | reduce_ex | repr | reversed | rfloordiv |\n      | rlshift | rmod | rmul | ror | round | rpow\n      | rrshift | rshift | rsub | rtruediv | rxor | set\n      | setattr | setitem | set_name | setslice\n      | setstate | sizeof | str | sub | subclasscheck\n      | truediv | trunc | unicode | xor | matmul\n      | rmatmul | imatmul | init_subclass | set_name\n      | fspath | bytes | prepare | length_hint\n    )__\n  )\\b\n","captures":{"1":{"name":"support.function.magic.scenic"}}},"magic-names":{"patterns":[{"include":"#magic-function-names"},{"include":"#magic-variable-names"}]},"magic-variable-names":{"match":"(?x)\n  \\b(\n    __(?:\n      all | annotations | bases | builtins | class\n      | closure | code | debug | defaults | dict | doc | file | func\n      | globals | kwdefaults | match_args | members | metaclass | methods\n      | module | mro | mro_entries | name | qualname | post_init | self\n      | signature | slots | subclasses | version | weakref | wrapped\n      | classcell | spec | path | package | future | traceback\n    )__\n  )\\b\n","captures":{"1":{"name":"support.variable.magic.scenic"}}},"member-access":{"begin":"(\\.)\\s*(?!\\.)","end":"(?x)\n  # stop when you've just read non-whitespace followed by non-word\n  # i.e. when finished reading an identifier or function call\n  (?\u003c=\\S)(?=\\W) |\n  # stop when seeing the start of something that's not a word,\n  # i.e. when seeing a non-identifier\n  (^|(?\u003c=\\s))(?=[^\\\\\\w\\s]) |\n  $\n","patterns":[{"include":"#function-call"},{"include":"#member-access-base"}],"beginCaptures":{"1":{"name":"punctuation.separator.period.scenic"}}},"member-access-base":{"patterns":[{"include":"#magic-names"},{"include":"#illegal-names"},{"include":"#illegal-object-name"},{"include":"#special-names"},{"include":"#line-continuation"},{"include":"#item-access"}]},"member-access-class":{"begin":"(\\.)\\s*(?!\\.)","end":"(?\u003c=\\S)(?=\\W)|$","patterns":[{"include":"#call-wrapper-inheritance"},{"include":"#member-access-base"},{"include":"#inheritance-identifier"}],"beginCaptures":{"1":{"name":"punctuation.separator.period.scenic"}}},"number":{"name":"constant.numeric.scenic","patterns":[{"include":"#number-float"},{"include":"#number-dec"},{"include":"#number-hex"},{"include":"#number-oct"},{"include":"#number-bin"},{"include":"#number-long"},{"name":"invalid.illegal.name.scenic","match":"\\b[0-9]+\\w+"}]},"number-bin":{"name":"constant.numeric.bin.scenic","match":"(?x)\n  (?\u003c![\\w\\.])\n    (0[bB]) (_?[01])+\n  \\b\n","captures":{"1":{"name":"storage.type.number.scenic"}}},"number-dec":{"name":"constant.numeric.dec.scenic","match":"(?x)\n  (?\u003c![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n","captures":{"1":{"name":"storage.type.imaginary.number.scenic"},"2":{"name":"invalid.illegal.dec.scenic"},"3":{"name":"invalid.illegal.dec.scenic"}}},"number-float":{"name":"constant.numeric.float.scenic","match":"(?x)\n  (?\u003c! \\w)(?:\n    (?:\n      \\.[0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\.\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\n    |\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\n  )([jJ])?\\b\n","captures":{"1":{"name":"storage.type.imaginary.number.scenic"}}},"number-hex":{"name":"constant.numeric.hex.scenic","match":"(?x)\n  (?\u003c![\\w\\.])\n    (0[xX]) (_?[0-9a-fA-F])+\n  \\b\n","captures":{"1":{"name":"storage.type.number.scenic"}}},"number-long":{"name":"constant.numeric.bin.scenic","match":"(?x)\n  (?\u003c![\\w\\.])\n    ([1-9][0-9]* | 0) ([lL])\n  \\b\n","captures":{"2":{"name":"storage.type.number.scenic"}}},"number-oct":{"name":"constant.numeric.oct.scenic","match":"(?x)\n  (?\u003c![\\w\\.])\n    (0[oO]) (_?[0-7])+\n  \\b\n","captures":{"1":{"name":"storage.type.number.scenic"}}},"old-instance-statement":{"name":"meta.instance.scenic","begin":"(?x)\n  # Case 1: at least one specifier.\n  ^\\s*\n  (?: (?: (ego) | [[:alpha:]_]\\w* ) \\s* (=) | (return))? \\s*\n  (?! True|False|None|NotImplemented|Ellipsis)\n  (?: (Point | OrientedPoint | Object)\\b | ([[:upper:]]\\w*))\n  (?=\n    \\s+ (?:\n      (?: with) \\s+ \\b[[:alpha:]_]\\w*\n      | (?:\n        at | offset\\ by | offset\\ along\n        | (?: (?: left | right | ahead)\\ of) | behind\n        | above | below\n        | beyond\n        | visible\\ from | visible\n        | not\\ visible\\ from | not\\ visible\n        | in | on\n        | contained\\ in\n        | following\n        | facing\\ (?: directly\\ )? (?: toward | away\\ from)\n        | facing | apparently\\ facing\n      )\n    )\n  )\\b\n\n# Case 2: assignment with no specifiers. Only match ego since otherwise\n#   we'd get annoying false positives while typing Python lines like\n#   'x = MyPythonClass()' before adding the parentheses.\n| ^\\s* (ego) \\s* (=) \\s*\n  (?: (Object)\\b | ([[:upper:]]\\w*))\n  (?= \\s* (?: \\#.*)? $ )\n\n# Case 3: name with no specifiers. We'll allow this since we only match\n#   capitalized names, which are rare as variable or side-effecting\n#   function names so we should get few false positives.\n| ^\\s* (?: (Object)\\b | ([[:upper:]]\\w*))\n  (?= \\s* (?: \\#.*)? $ )\n","end":"\\n","patterns":[{"include":"#specifier"},{"include":"#line-continuation"}],"beginCaptures":{"1":{"name":"variable.language.special.ego.scenic"},"10":{"name":"markup.italic markup.bold entity.name.instance.scenic"},"11":{"name":"markup.bold entity.name.instance.scenic"},"2":{"name":"keyword.operator.assignment.scenic"},"3":{"name":"keyword.control.flow.scenic"},"4":{"name":"markup.italic markup.bold entity.name.instance.scenic"},"5":{"name":"markup.bold entity.name.instance.scenic"},"6":{"name":"variable.language.special.ego.scenic"},"7":{"name":"keyword.operator.assignment.scenic"},"8":{"name":"markup.italic markup.bold entity.name.instance.scenic"},"9":{"name":"markup.bold entity.name.instance.scenic"}}},"old-monitor-declaration":{"name":"meta.function.scenic","begin":"(?x)\n  ^\\s*\n  (monitor)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\s* :\n    )\n","end":"(:)","patterns":[{"include":"#function-def-name"}],"beginCaptures":{"1":{"name":"storage.type.function.scenic"}},"endCaptures":{"1":{"name":"punctuation.section.function.begin.scenic"}}},"operator":{"match":"(?x)\n    \\b(?\u003c!\\.)\n      (?:\n        (and | or | not | in | is)                         (?# 1)\n        |\n        (for | if | else | await | (?:yield(?:\\s+from)?))  (?# 2)\n      )\n    (?!\\s*:)\\b\n\n    | (\u003c\u003c | \u003e\u003e | \u0026 | \\| | \\^ | ~)                          (?# 3)\n\n    | (\\*\\* | \\* | \\+ | - | % | // | / | @)                (?# 4)\n\n    | (!= | == | \u003e= | \u003c= | \u003c | \u003e)                          (?# 5)\n\n    | (:=)                                                 (?# 6)\n\n    | (                                                    (?# 7)\n      deg\n      | (?:\n          (?:relative | apparent)\\ heading\\ of\n          | distance\\ (?:from | to | past)\n          | (?:angle | altitude)\\ (?:from | to) | can\\ see\n          | at | relative\\ to\n          | offset\\ by | offset\\ along\n          | visible | not\\ visible\n          | (?:front | back | left | right | top | bottom)\\ of\n          | (?:(?:front | back | top | bottom)\\ (?:left | right))\\ of\n          | (?:(?:top | bottom)\\ (?:front | back))\\ of\n          | (?:(?:top | bottom)\\ (?:front | back)\\ (?:left | right))\\ of\n        )\\b(?! \\s* (?: [)}\\]=:.;,#] | $))\n      )\n","captures":{"1":{"name":"keyword.operator.logical.scenic"},"2":{"name":"keyword.control.flow.scenic"},"3":{"name":"keyword.operator.bitwise.scenic"},"4":{"name":"keyword.operator.arithmetic.scenic"},"5":{"name":"keyword.operator.comparison.scenic"},"6":{"name":"keyword.operator.assignment.scenic"},"7":{"name":"keyword.operator.scenic"}}},"override-statement":{"name":"meta.override.scenic","begin":"(?x)\n  ^\\s*\n  (override) \\s+ (?: (ego) | [[:alpha:]_]\\w*)\n  \\s+\n","end":"\\n","patterns":[{"include":"#specifier"},{"include":"#line-continuation"}],"beginCaptures":{"1":{"name":"keyword.control.flow.scenic"},"2":{"name":"variable.language.special.ego.scenic"}}},"param-statement":{"begin":"^\\s*(param)\\s+","end":"(\\#.*)?\\n","patterns":[{"name":"meta.param.scenic","match":"(?x)\n  ([[:alpha:]_]\\w* | '[^\\\\'\"%{\\n]+' | \"[^\\\\'\"%{\\n]+\")\n  \\s* (=) \\s*\n","captures":{"1":{"name":"variable.parameter.global.scenic"},"2":{"name":"keyword.operator.assignment.scenic"}}},{"include":"#expression"}],"beginCaptures":{"1":{"name":"keyword.control.flow.scenic"}},"endCaptures":{"1":{"name":"comment.line.number-sign.scenic"}}},"parameter-special":{"match":"(?x)\n  \\b ((self)|(cls)) \\b \\s*(?:(,)|(?=\\)))\n","captures":{"1":{"name":"variable.parameter.function.language.scenic"},"2":{"name":"variable.parameter.function.language.special.self.scenic"},"3":{"name":"variable.parameter.function.language.special.cls.scenic"},"4":{"name":"punctuation.separator.parameters.scenic"}}},"parameters":{"name":"meta.function.parameters.scenic","begin":"(\\()","end":"(\\))","patterns":[{"name":"keyword.operator.positional.parameter.scenic","match":"/"},{"name":"keyword.operator.unpacking.parameter.scenic","match":"(\\*\\*|\\*)"},{"include":"#lambda-incomplete"},{"include":"#illegal-names"},{"include":"#illegal-object-name"},{"include":"#parameter-special"},{"match":"(?x)\n  ([[:alpha:]_]\\w*)\n    \\s* (?: (,) | (?=[)#\\n=]))\n","captures":{"1":{"name":"variable.parameter.function.language.scenic"},"2":{"name":"punctuation.separator.parameters.scenic"}}},{"include":"#comments"},{"include":"#loose-default"},{"include":"#annotated-parameter"}],"beginCaptures":{"1":{"name":"punctuation.definition.parameters.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.parameters.end.scenic"}}},"property-attribute":{"patterns":[{"name":"storage.type.property.scenic","match":"\\b(additive|dynamic|final)\\b"}]},"property-declaration":{"patterns":[{"name":"meta.property.scenic","begin":"(?x)\n  ^\\s+\n  (?!else|except|finally) ([[:alpha:]_]\\w*)\n  \\s*\n  (?: (\\[) (?= [\\w\\s,]* \\] \\s* : \\s* [^\\s\\#])\n    | (?= : \\s* [^\\s\\#]))\n","end":"(?x)\n  (\\])? \\s* (:)\n","patterns":[{"include":"#property-attribute"},{"name":"punctuation.separator.element.scenic","match":","}],"beginCaptures":{"1":{"name":"entity.name.property.scenic"},"2":{"name":"punctuation.definition.arguments.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.arguments.end.scenic"},"2":{"name":"punctuation.separator.colon.scenic"}}}]},"punctuation":{"patterns":[{"name":"punctuation.separator.colon.scenic","match":":"},{"name":"punctuation.separator.element.scenic","match":","}]},"regexp":{"patterns":[{"include":"#regexp-single-three-line"},{"include":"#regexp-double-three-line"},{"include":"#regexp-single-one-line"},{"include":"#regexp-double-one-line"}]},"regexp-backreference":{"name":"meta.backreference.named.regexp","match":"(?x)\n  (\\()  (\\?P= \\w+(?:\\s+[[:alnum:]]+)?)  (\\))\n","captures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp"},"2":{"name":"entity.name.tag.named.backreference.regexp"},"3":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp"}}},"regexp-backreference-number":{"name":"meta.backreference.regexp","match":"(\\\\[1-9]\\d?)","captures":{"1":{"name":"entity.name.tag.backreference.regexp"}}},"regexp-base-common":{"patterns":[{"name":"support.other.match.any.regexp","match":"\\."},{"name":"support.other.match.begin.regexp","match":"\\^"},{"name":"support.other.match.end.regexp","match":"\\$"},{"name":"keyword.operator.quantifier.regexp","match":"[+*?]\\??"},{"name":"keyword.operator.disjunction.regexp","match":"\\|"},{"include":"#regexp-escape-sequence"}]},"regexp-base-expression":{"patterns":[{"include":"#regexp-quantifier"},{"include":"#regexp-base-common"}]},"regexp-charecter-set-escapes":{"patterns":[{"name":"constant.character.escape.regexp","match":"\\\\[abfnrtv\\\\]"},{"include":"#regexp-escape-special"},{"name":"constant.character.escape.regexp","match":"\\\\([0-7]{1,3})"},{"include":"#regexp-escape-character"},{"include":"#regexp-escape-unicode"},{"include":"#regexp-escape-catchall"}]},"regexp-double-one-line":{"name":"string.regexp.quoted.single.scenic","begin":"\\b(([uU]r)|([bB]r)|(r[bB]?))(\")","end":"(\")|(?\u003c!\\\\)(\\n)","patterns":[{"include":"#double-one-regexp-expression"}],"beginCaptures":{"2":{"name":"invalid.deprecated.prefix.scenic"},"3":{"name":"storage.type.string.scenic"},"4":{"name":"storage.type.string.scenic"},"5":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"regexp-double-three-line":{"name":"string.regexp.quoted.multi.scenic","begin":"\\b(([uU]r)|([bB]r)|(r[bB]?))(\"\"\")","end":"(\"\"\")","patterns":[{"include":"#double-three-regexp-expression"}],"beginCaptures":{"2":{"name":"invalid.deprecated.prefix.scenic"},"3":{"name":"storage.type.string.scenic"},"4":{"name":"storage.type.string.scenic"},"5":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"regexp-escape-catchall":{"name":"constant.character.escape.regexp","match":"\\\\(.|\\n)"},"regexp-escape-character":{"name":"constant.character.escape.regexp","match":"(?x)\n  \\\\ (\n        x[0-9A-Fa-f]{2}\n        | 0[0-7]{1,2}\n        | [0-7]{3}\n     )\n"},"regexp-escape-sequence":{"patterns":[{"include":"#regexp-escape-special"},{"include":"#regexp-escape-character"},{"include":"#regexp-escape-unicode"},{"include":"#regexp-backreference-number"},{"include":"#regexp-escape-catchall"}]},"regexp-escape-special":{"name":"support.other.escape.special.regexp","match":"\\\\([AbBdDsSwWZ])"},"regexp-escape-unicode":{"name":"constant.character.unicode.regexp","match":"(?x)\n  \\\\ (\n        u[0-9A-Fa-f]{4}\n        | U[0-9A-Fa-f]{8}\n     )\n"},"regexp-flags":{"name":"storage.modifier.flag.regexp","match":"\\(\\?[aiLmsux]+\\)"},"regexp-quantifier":{"name":"keyword.operator.quantifier.regexp","match":"(?x)\n  \\{(\n    \\d+ | \\d+,(\\d+)? | ,\\d+\n  )\\}\n"},"regexp-single-one-line":{"name":"string.regexp.quoted.single.scenic","begin":"\\b(([uU]r)|([bB]r)|(r[bB]?))(\\')","end":"(\\')|(?\u003c!\\\\)(\\n)","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"2":{"name":"invalid.deprecated.prefix.scenic"},"3":{"name":"storage.type.string.scenic"},"4":{"name":"storage.type.string.scenic"},"5":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"regexp-single-three-line":{"name":"string.regexp.quoted.multi.scenic","begin":"\\b(([uU]r)|([bB]r)|(r[bB]?))(\\'\\'\\')","end":"(\\'\\'\\')","patterns":[{"include":"#single-three-regexp-expression"}],"beginCaptures":{"2":{"name":"invalid.deprecated.prefix.scenic"},"3":{"name":"storage.type.string.scenic"},"4":{"name":"storage.type.string.scenic"},"5":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"require-statement":{"patterns":[{"name":"meta.requirement.scenic","begin":"(?x)\n  ^\\s* (require) \\s+ (?!monitor)\n","end":"(?x) (\\#.*)? \\n","patterns":[{"include":"#temporal-expression"}],"beginCaptures":{"1":{"name":"keyword.control.flow.scenic"}},"endCaptures":{"1":{"name":"comment.line.number-sign.scenic"}}}]},"return-annotation":{"begin":"(-\u003e)","end":"(?=:)","patterns":[{"include":"#expression"}],"beginCaptures":{"1":{"name":"punctuation.separator.annotation.result.scenic"}}},"round-braces":{"begin":"\\(","end":"\\)","patterns":[{"include":"#expression"}],"beginCaptures":{"0":{"name":"punctuation.parenthesis.begin.scenic"}},"endCaptures":{"0":{"name":"punctuation.parenthesis.end.scenic"}}},"scenario-declaration":{"name":"meta.function.scenic","begin":"(?x)\n  ^\\s*\n  (scenario | behavior | monitor)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n","end":"(:|(?=[#'\"\\n]))","patterns":[{"include":"#function-def-name"},{"include":"#parameters"},{"include":"#line-continuation"},{"include":"#return-annotation"}],"beginCaptures":{"1":{"name":"storage.type.function.scenic"}},"endCaptures":{"1":{"name":"punctuation.section.function.begin.scenic"}}},"semicolon":{"patterns":[{"name":"invalid.deprecated.semicolon.scenic","match":"\\;$"}]},"single-one-regexp-character-set":{"patterns":[{"match":"(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"},{"name":"meta.character.set.regexp","begin":"(\\[)(\\^)?(\\])?","end":"(\\]|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#regexp-charecter-set-escapes"},{"name":"constant.character.set.regexp","match":"[^\\n]"}],"beginCaptures":{"1":{"name":"punctuation.character.set.begin.regexp constant.other.set.regexp"},"2":{"name":"keyword.operator.negation.regexp"},"3":{"name":"constant.character.set.regexp"}},"endCaptures":{"1":{"name":"punctuation.character.set.end.regexp constant.other.set.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}}]},"single-one-regexp-comments":{"name":"comment.regexp","begin":"\\(\\?#","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#codetags"}],"beginCaptures":{"0":{"name":"punctuation.comment.begin.regexp"}},"endCaptures":{"1":{"name":"punctuation.comment.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-conditional":{"begin":"(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.conditional.regexp"},"1":{"name":"punctuation.parenthesis.conditional.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-expression":{"patterns":[{"include":"#regexp-base-expression"},{"include":"#single-one-regexp-character-set"},{"include":"#single-one-regexp-comments"},{"include":"#regexp-flags"},{"include":"#single-one-regexp-named-group"},{"include":"#regexp-backreference"},{"include":"#single-one-regexp-lookahead"},{"include":"#single-one-regexp-lookahead-negative"},{"include":"#single-one-regexp-lookbehind"},{"include":"#single-one-regexp-lookbehind-negative"},{"include":"#single-one-regexp-conditional"},{"include":"#single-one-regexp-parentheses-non-capturing"},{"include":"#single-one-regexp-parentheses"}]},"single-one-regexp-lookahead":{"begin":"(\\()\\?=","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-lookahead-negative":{"begin":"(\\()\\?!","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-lookbehind":{"begin":"(\\()\\?\u003c=","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-lookbehind-negative":{"begin":"(\\()\\?\u003c!","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-named-group":{"name":"meta.named.regexp","begin":"(?x)\n  (\\()  (\\?P \u003c\\w+(?:\\s+[[:alnum:]]+)?\u003e)\n","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"},"2":{"name":"entity.name.tag.named.group.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-parentheses":{"begin":"\\(","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-one-regexp-parentheses-non-capturing":{"begin":"\\(\\?:","end":"(\\)|(?=\\'))|((?=(?\u003c!\\\\)\\n))","patterns":[{"include":"#single-one-regexp-expression"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-character-set":{"patterns":[{"match":"(?x)\n  \\[ \\^? \\] (?! .*?\\])\n"},{"name":"meta.character.set.regexp","begin":"(\\[)(\\^)?(\\])?","end":"(\\]|(?=\\'\\'\\'))","patterns":[{"include":"#regexp-charecter-set-escapes"},{"name":"constant.character.set.regexp","match":"[^\\n]"}],"beginCaptures":{"1":{"name":"punctuation.character.set.begin.regexp constant.other.set.regexp"},"2":{"name":"keyword.operator.negation.regexp"},"3":{"name":"constant.character.set.regexp"}},"endCaptures":{"1":{"name":"punctuation.character.set.end.regexp constant.other.set.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}}]},"single-three-regexp-comments":{"name":"comment.regexp","begin":"\\(\\?#","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#codetags"}],"beginCaptures":{"0":{"name":"punctuation.comment.begin.regexp"}},"endCaptures":{"1":{"name":"punctuation.comment.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-conditional":{"begin":"(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"0":{"name":"keyword.operator.conditional.regexp"},"1":{"name":"punctuation.parenthesis.conditional.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-expression":{"patterns":[{"include":"#regexp-base-expression"},{"include":"#single-three-regexp-character-set"},{"include":"#single-three-regexp-comments"},{"include":"#regexp-flags"},{"include":"#single-three-regexp-named-group"},{"include":"#regexp-backreference"},{"include":"#single-three-regexp-lookahead"},{"include":"#single-three-regexp-lookahead-negative"},{"include":"#single-three-regexp-lookbehind"},{"include":"#single-three-regexp-lookbehind-negative"},{"include":"#single-three-regexp-conditional"},{"include":"#single-three-regexp-parentheses-non-capturing"},{"include":"#single-three-regexp-parentheses"},{"include":"#comments-string-single-three"}]},"single-three-regexp-lookahead":{"begin":"(\\()\\?=","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-lookahead-negative":{"begin":"(\\()\\?!","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookahead.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookahead.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-lookbehind":{"begin":"(\\()\\?\u003c=","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-lookbehind-negative":{"begin":"(\\()\\?\u003c!","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"0":{"name":"keyword.operator.lookbehind.negative.regexp"},"1":{"name":"punctuation.parenthesis.lookbehind.begin.regexp"}},"endCaptures":{"1":{"name":"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-named-group":{"name":"meta.named.regexp","begin":"(?x)\n  (\\()  (\\?P \u003c\\w+(?:\\s+[[:alnum:]]+)?\u003e)\n","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"},"2":{"name":"entity.name.tag.named.group.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-parentheses":{"begin":"\\(","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"single-three-regexp-parentheses-non-capturing":{"begin":"\\(\\?:","end":"(\\)|(?=\\'\\'\\'))","patterns":[{"include":"#single-three-regexp-expression"},{"include":"#comments-string-single-three"}],"beginCaptures":{"0":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"}},"endCaptures":{"1":{"name":"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"},"2":{"name":"invalid.illegal.newline.scenic"}}},"special-names":{"name":"constant.other.caps.scenic","match":"(?x)\n  \\b\n    # we want to see \"enough\", meaning 2 or more upper-case\n    # letters in the beginning of the constant\n    #\n    # for more details refer to:\n    #   https://github.com/MagicStack/MagicPython/issues/42\n    (\n      _* [[:upper:]] [_\\d]* [[:upper:]]\n    )\n    [[:upper:]\\d]* (_\\w*)?\n  \\b\n"},"special-variables":{"match":"(?x)\n  \\b (?\u003c!\\.) (?:\n    (self) | (cls) | (ego) | (workspace)\n  )\\b\n","captures":{"1":{"name":"variable.language.special.self.scenic"},"2":{"name":"variable.language.special.cls.scenic"},"3":{"name":"variable.language.special.ego.scenic"},"4":{"name":"variable.language.special.workspace.scenic"}}},"specifier":{"name":"meta.specifier.scenic","begin":"(?x)\n  \\b(?\u003c!\\.) (?:\n    (with) \\s+ \\b([[:alpha:]_]\\w*)\n    | (\n      at | offset\\ by | offset\\ along\n      | ((left | right | ahead)\\ of) | behind\n      | above | below\n      | beyond\n      | visible\\ from | visible\n      | not\\ visible\\ from | not\\ visible\n      | in | on\n      | contained\\ in\n      | following\n      | facing\\ (?:directly\\ )? (toward | away\\ from)\n      | facing | apparently\\ facing\n    )\n  )\\b\n","end":"(?x)\n  (,) \\s* (?: (\\#.*)? \\n)?\n  | (?=[)}\\]\\n])\n","patterns":[{"match":"(\\\\)\\s*\\n","captures":{"1":{"name":"punctuation.separator.continuation.line.scenic"}}},{"include":"#expression"}],"beginCaptures":{"1":{"name":"keyword.other.specifier.scenic"},"2":{"name":"entity.name.property.scenic"},"3":{"name":"keyword.other.specifier.scenic"}},"endCaptures":{"1":{"name":"punctuation.separator.specifier.scenic"},"2":{"name":"comment.line.number-sign.scenic"}}},"statement":{"patterns":[{"include":"#import"},{"include":"#class-declaration"},{"include":"#function-declaration"},{"include":"#scenario-declaration"},{"include":"#old-monitor-declaration"},{"include":"#statement-keyword"},{"include":"#override-statement"},{"include":"#param-statement"},{"include":"#require-statement"},{"include":"#statement-keyword-scenic"},{"include":"#assignment-operator"},{"include":"#decorator"},{"include":"#property-declaration"},{"include":"#docstring-statement"},{"include":"#semicolon"},{"include":"#old-instance-statement"}]},"statement-keyword":{"patterns":[{"name":"storage.type.function.scenic","match":"\\b((async\\s+)?\\s*def)\\b"},{"name":"keyword.control.flow.scenic","match":"(?x)\n  \\b(?\u003c!\\.)(\n    as | async | continue | del | assert | break | finally | for\n    | from | elif | else | if | except | pass | raise\n    | return | try | while | with\n  )\\b\n"},{"name":"storage.modifier.declaration.scenic","match":"(?x)\n  \\b(?\u003c!\\.)(\n    global | nonlocal\n  )\\b\n"},{"name":"storage.type.class.scenic","match":"\\b(?\u003c!\\.)(class)\\b"},{"match":"(?x)\n  ^\\s*(\n    case | match\n  )(?=\\s*([-+\\w\\d(\\[{'\":#]|$))\\b\n","captures":{"1":{"name":"keyword.control.flow.scenic"}}}]},"statement-keyword-scenic":{"patterns":[{"name":"keyword.control.flow.scenic","match":"(?x)\n  ^\\s*(\n    model | simulator | param\n    | require\\ monitor | require\n    | terminate\\ when | terminate\\ after\n    | terminate\\ simulation\\ when\n    | mutate\n    | record\\ initial | record\\ final | record\n    | take | wait | terminate\\ simulation | terminate\n    | do\\ choose | do\\ shuffle | do\n    | abort | override\n    | interrupt\\ when\n  )\\b (?!\\s*[:.;,])\n"},{"name":"keyword.control.flow.scenic","match":"(?x)\n  \\b(?\u003c!\\.)(seconds | steps)\\b (?= \\s*(\\#.*)? $)\n"},{"name":"keyword.control.flow.scenic","match":"(?x)\n  ^\\s*(setup | compose | precondition | invariant)(:)\n","captures":{"1":{"name":"keyword.control.flow.scenic"},"2":{"name":"punctuation.section.function.begin.scenic"}}}]},"string":{"patterns":[{"include":"#string-quoted-multi-line"},{"include":"#string-quoted-single-line"},{"include":"#string-bin-quoted-multi-line"},{"include":"#string-bin-quoted-single-line"},{"include":"#string-raw-quoted-multi-line"},{"include":"#string-raw-quoted-single-line"},{"include":"#string-raw-bin-quoted-multi-line"},{"include":"#string-raw-bin-quoted-single-line"},{"include":"#fstring-fnorm-quoted-multi-line"},{"include":"#fstring-fnorm-quoted-single-line"},{"include":"#fstring-normf-quoted-multi-line"},{"include":"#fstring-normf-quoted-single-line"},{"include":"#fstring-raw-quoted-multi-line"},{"include":"#fstring-raw-quoted-single-line"}]},"string-bin-quoted-multi-line":{"name":"string.quoted.binary.multi.scenic","begin":"(\\b[bB])('''|\"\"\")","end":"(\\2)","patterns":[{"include":"#string-entity"}],"beginCaptures":{"1":{"name":"storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-bin-quoted-single-line":{"name":"string.quoted.binary.single.scenic","begin":"(\\b[bB])((['\"]))","end":"(\\2)|((?\u003c!\\\\)\\n)","patterns":[{"include":"#string-entity"}],"beginCaptures":{"1":{"name":"storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-brace-formatting":{"patterns":[{"name":"meta.format.brace.scenic","match":"(?x)\n  (\n    {{ | }}\n    | (?:\n      {\n        \\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'\"]+\\])*\n        (![rsa])?\n        ( : \\w? [\u003c\u003e=^]? [-+ ]? \\#?\n          \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )?\n      })\n  )\n","captures":{"1":{"name":"constant.character.format.placeholder.other.scenic"},"3":{"name":"storage.type.format.scenic"},"4":{"name":"storage.type.format.scenic"}}},{"name":"meta.format.brace.scenic","match":"(?x)\n  (\n    {\n      \\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'\"]+\\])*\n      (![rsa])?\n      (:)\n        [^'\"{}\\n]* (?:\n          \\{ [^'\"}\\n]*? \\} [^'\"{}\\n]*\n        )*\n    }\n  )\n","captures":{"1":{"name":"constant.character.format.placeholder.other.scenic"},"3":{"name":"storage.type.format.scenic"},"4":{"name":"storage.type.format.scenic"}}}]},"string-consume-escape":{"match":"\\\\['\"\\n\\\\]"},"string-entity":{"patterns":[{"include":"#escape-sequence"},{"include":"#string-line-continuation"},{"include":"#string-formatting"}]},"string-formatting":{"name":"meta.format.percent.scenic","match":"(?x)\n  (\n    % (\\([\\w\\s]*\\))?\n      [-+#0 ]*\n      (\\d+|\\*)? (\\.(\\d+|\\*))?\n      ([hlL])?\n      [diouxXeEfFgGcrsab%]\n  )\n","captures":{"1":{"name":"constant.character.format.placeholder.other.scenic"}}},"string-line-continuation":{"name":"constant.language.scenic","match":"\\\\$"},"string-multi-bad-brace1-formatting-raw":{"begin":"(?x)\n    (?= \\{%\n          ( .*? (?!'''|\"\"\") )\n        %\\}\n    )\n","end":"(?='''|\"\"\")","patterns":[{"include":"#string-consume-escape"}]},"string-multi-bad-brace1-formatting-unicode":{"begin":"(?x)\n    (?= \\{%\n          ( .*? (?!'''|\"\"\") )\n        %\\}\n    )\n","end":"(?='''|\"\"\")","patterns":[{"include":"#escape-sequence-unicode"},{"include":"#escape-sequence"},{"include":"#string-line-continuation"}]},"string-multi-bad-brace2-formatting-raw":{"begin":"(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!'''|\"\"\") [^!:\\.\\[}\\w]\n           )\n        .*?(?!'''|\"\"\")\n        \\}\n    )\n","end":"(?='''|\"\"\")","patterns":[{"include":"#string-consume-escape"},{"include":"#string-formatting"}]},"string-multi-bad-brace2-formatting-unicode":{"begin":"(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!'''|\"\"\") [^!:\\.\\[}\\w]\n           )\n        .*?(?!'''|\"\"\")\n        \\}\n    )\n","end":"(?='''|\"\"\")","patterns":[{"include":"#escape-sequence-unicode"},{"include":"#string-entity"}]},"string-quoted-multi-line":{"name":"string.quoted.multi.scenic","begin":"(?:\\b([rR])(?=[uU]))?([uU])?('''|\"\"\")","end":"(\\3)","patterns":[{"include":"#string-multi-bad-brace1-formatting-unicode"},{"include":"#string-multi-bad-brace2-formatting-unicode"},{"include":"#string-unicode-guts"}],"beginCaptures":{"1":{"name":"invalid.illegal.prefix.scenic"},"2":{"name":"storage.type.string.scenic"},"3":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-quoted-single-line":{"name":"string.quoted.single.scenic","begin":"(?:\\b([rR])(?=[uU]))?([uU])?((['\"]))","end":"(\\3)|((?\u003c!\\\\)\\n)","patterns":[{"include":"#string-single-bad-brace1-formatting-unicode"},{"include":"#string-single-bad-brace2-formatting-unicode"},{"include":"#string-unicode-guts"}],"beginCaptures":{"1":{"name":"invalid.illegal.prefix.scenic"},"2":{"name":"storage.type.string.scenic"},"3":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-raw-bin-guts":{"patterns":[{"include":"#string-consume-escape"},{"include":"#string-formatting"}]},"string-raw-bin-quoted-multi-line":{"name":"string.quoted.raw.binary.multi.scenic","begin":"(\\b(?:R[bB]|[bB]R))('''|\"\"\")","end":"(\\2)","patterns":[{"include":"#string-raw-bin-guts"}],"beginCaptures":{"1":{"name":"storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-raw-bin-quoted-single-line":{"name":"string.quoted.raw.binary.single.scenic","begin":"(\\b(?:R[bB]|[bB]R))((['\"]))","end":"(\\2)|((?\u003c!\\\\)\\n)","patterns":[{"include":"#string-raw-bin-guts"}],"beginCaptures":{"1":{"name":"storage.type.string.scenic"},"2":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-raw-guts":{"patterns":[{"include":"#string-consume-escape"},{"include":"#string-formatting"},{"include":"#string-brace-formatting"}]},"string-raw-quoted-multi-line":{"name":"string.quoted.raw.multi.scenic","begin":"\\b(([uU]R)|(R))('''|\"\"\")","end":"(\\4)","patterns":[{"include":"#string-multi-bad-brace1-formatting-raw"},{"include":"#string-multi-bad-brace2-formatting-raw"},{"include":"#string-raw-guts"}],"beginCaptures":{"2":{"name":"invalid.deprecated.prefix.scenic"},"3":{"name":"storage.type.string.scenic"},"4":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-raw-quoted-single-line":{"name":"string.quoted.raw.single.scenic","begin":"\\b(([uU]R)|(R))((['\"]))","end":"(\\4)|((?\u003c!\\\\)\\n)","patterns":[{"include":"#string-single-bad-brace1-formatting-raw"},{"include":"#string-single-bad-brace2-formatting-raw"},{"include":"#string-raw-guts"}],"beginCaptures":{"2":{"name":"invalid.deprecated.prefix.scenic"},"3":{"name":"storage.type.string.scenic"},"4":{"name":"punctuation.definition.string.begin.scenic"}},"endCaptures":{"1":{"name":"punctuation.definition.string.end.scenic"},"2":{"name":"invalid.illegal.newline.scenic"}}},"string-single-bad-brace1-formatting-raw":{"begin":"(?x)\n    (?= \\{%\n          ( .*? (?!(['\"])|((?\u003c!\\\\)\\n)) )\n        %\\}\n    )\n","end":"(?=(['\"])|((?\u003c!\\\\)\\n))","patterns":[{"include":"#string-consume-escape"}]},"string-single-bad-brace1-formatting-unicode":{"begin":"(?x)\n    (?= \\{%\n          ( .*? (?!(['\"])|((?\u003c!\\\\)\\n)) )\n        %\\}\n    )\n","end":"(?=(['\"])|((?\u003c!\\\\)\\n))","patterns":[{"include":"#escape-sequence-unicode"},{"include":"#escape-sequence"},{"include":"#string-line-continuation"}]},"string-single-bad-brace2-formatting-raw":{"begin":"(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!(['\"])|((?\u003c!\\\\)\\n)) [^!:\\.\\[}\\w]\n           )\n        .*?(?!(['\"])|((?\u003c!\\\\)\\n))\n        \\}\n    )\n","end":"(?=(['\"])|((?\u003c!\\\\)\\n))","patterns":[{"include":"#string-consume-escape"},{"include":"#string-formatting"}]},"string-single-bad-brace2-formatting-unicode":{"begin":"(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n              \\w*? (?!(['\"])|((?\u003c!\\\\)\\n)) [^!:\\.\\[}\\w]\n           )\n        .*?(?!(['\"])|((?\u003c!\\\\)\\n))\n        \\}\n    )\n","end":"(?=(['\"])|((?\u003c!\\\\)\\n))","patterns":[{"include":"#escape-sequence-unicode"},{"include":"#string-entity"}]},"string-unicode-guts":{"patterns":[{"include":"#escape-sequence-unicode"},{"include":"#string-entity"},{"include":"#string-brace-formatting"}]},"temporal-expression":{"patterns":[{"name":"keyword.control.flow.scenic","match":"(?x)\n  (always | eventually | next | until | implies)\\b\n"},{"begin":"\\(","end":"\\)","patterns":[{"include":"#temporal-expression"}],"beginCaptures":{"0":{"name":"punctuation.parenthesis.begin.scenic"}},"endCaptures":{"0":{"name":"punctuation.parenthesis.end.scenic"}}},{"include":"#expression"}]}}}
