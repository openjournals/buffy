#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'serrano'
require 'multi_json'

class Sr < Thor
  include Thor::Actions
  # class_option :json, :type => :boolean, :default => false

  desc 'works [DOIs]', 'Get works by DOIs'
  long_desc <<-LONGDESC
    `serrano works` accepts one or more DOIs to search for works

    Toggle `json` to get simplified (summary) or complete output (JSON)

    # A single DOI
    \x5$ serrano works 10.1371/journal.pone.0033693

    DOI: 10.1371/journal.pone.0033693
    \x5type: journal-article
    \x5title: Methylphenidate Exposure Induces Dopamine Neuron Loss and Activation of Microglia in the Basal Ganglia of Mice

    # Many DOIs
    \x5$ serrano works "10.1007/12080.1874-1746,10.1007/10452.1573-5125"

    DOI: 10.1007/12080.1874-1746
    \x5type: journal
    \x5title: Theoretical Ecology

    DOI: 10.1007/10452.1573-5125
    \x5type: journal
    \x5title: Aquatic Ecology

    # Verbose output gives JSON, pipe onwards, e.g., parse with jq
    \x5$ serrano works "10.1371/journal.pone.0033693,10.1007/12080.1874-1746,10.1007/10452.1573-5125" --json=true | jq .[].message.member

    "http://id.crossref.org/member/340"
    \x5"http://id.crossref.org/member/297"
    \x5"http://id.crossref.org/member/297"

    # Filter usage
    \x5$ serrano works --filter=has_orcid:true --json --limit=2 | jq '.message.items[].author[].ORCID | select(. != null)'

    "http://orcid.org/0000-0003-4087-8021"
    \x5"http://orcid.org/0000-0002-2076-5452"
    \x5"http://orcid.org/0000-0003-4087-8021"
    \x5"http://orcid.org/0000-0002-2076-5452"
  LONGDESC
  option :json, type: :boolean, default: false
  option :filter, type: :hash, default: nil
  option :limit, type: :numeric, default: nil
  def works(ids = nil)
    out = if ids.nil?
            Serrano.works(filter: options[:filter], limit: options[:limit])
          else
            Serrano.works(ids: ids.split(','), filter: options[:filter])
          end
    if !options[:json]
      out = out.collect { |x| x['message'].select { |k, _v| k[/DOI|type|title/] } }
      out.each do |x|
        puts 'DOI: ' + x['DOI'].to_s
        puts 'type: ' + x['type']
        puts 'title: ' + x['title'][0]
        puts
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc 'members [member IDs]', 'Get members by id'
  long_desc <<-LONGDESC
    `serrano members` accepts one or more Crossref member IDs

    Toggle `json` to get simplified (summary) or complete output (JSON)

    $ serrano members 98

    id: 98
    \x5title: Hindawi Publishing Corporation

    $ serrano members "98,340"

    id: 98
    \x5title: Hindawi Publishing Corporation

    id: 340
    \x5title: Public Library of Science (PLoS)

    $ serrano members "98,340,45,311,78" --json=true | jq .[].message.coverage.\"resource-links-current\"

    1 0 0 0.8311812281608582 0.985091507434845

    $ serrano members 98 --works=true --json=true | jq .[].message.items[].\"reference-count\"

    24 7 45 31 22 67 72 17 53 75 0 68 12 16 50 79 40 18 40 195
  LONGDESC
  option :json, type: :boolean, default: false
  option :query, type: :string, default: nil
  option :limit, type: :numeric, default: nil
  option :works, type: :boolean, default: false
  def members(ids = nil)
    if ids.nil?
      out = Serrano.members(query: options[:query], limit: options[:limit],
                            works: options[:works])
    else
      out = Serrano.members(ids: ids.split(','), query: options[:query], limit: options[:limit],
                            works: options[:works])
    end

    if !options[:json]
      if !options[:works]
        out = if out.class == Hash
                out['message']['items']
              else
                out.collect { |x| x['message'] }
              end

        # out = out.collect { |x| x['message'].select { |k,v| k[/id|primary-name/] } }
        out.each do |x|
          puts 'id: ' + x['id'].to_s
          puts 'title: ' + x['primary-name']
          puts
        end
      else
        print_works(out)
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc 'prefixes [DOI prefixes]', 'Search for prefixes by DOI prefix'
  long_desc <<-LONGDESC
    `serrano prefixes` accepts one or more Crossref member IDs

    Toggle `json` to get simplified (summary) or complete output (JSON)

    $ serrano prefixes 10.1016

    member: http://id.crossref.org/member/78
    \x5name: Elsevier BV
    \x5prefix: http://id.crossref.org/prefix/10.1016

    $ serrano prefixes "10.1016,10.1371"

    member: http://id.crossref.org/member/78
    \x5name: Elsevier BV
    \x5prefix: http://id.crossref.org/prefix/10.1016

    member: http://id.crossref.org/member/340
    \x5name: Public Library of Science (PLoS)
    \x5prefix: http://id.crossref.org/prefix/10.1371

    $ serrano prefixes "10.1016,10.1371,10.1023,10.4176,10.1093" --json=true | jq .[].message.name

    "Elsevier BV"
    \x5"Public Library of Science (PLoS)"
    \x5"Springer Science + Business Media"
    \x5"Co-Action Publishing"
    \x5"Oxford University Press (OUP)"
  LONGDESC
  option :json, type: :boolean, default: false
  option :limit, type: :numeric, default: nil
  option :works, type: :boolean, default: false
  def prefixes(ids = nil)
    out = if ids.nil?
            Serrano.prefixes(limit: options[:limit], works: options[:works])
          else
            Serrano.prefixes(ids: ids.split(','), limit: options[:limit],
                             works: options[:works])
          end

    if !options[:json]
      if !options[:works]
        out = if out.class == Hash
                out['message']['items']
              else
                out.collect { |x| x['message'] }
              end

        out.each do |x|
          puts 'member: ' + x['member']
          puts 'name: ' + x['name']
          puts 'prefix: ' + x['prefix']
          puts
        end
      else
        print_works(out)
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc 'funders [funder IDs]', 'Search for funders by DOI prefix'
  long_desc <<-LONGDESC
    `serrano funders` accepts one or more Crossref funder IDs

    Toggle `json` to get simplified (summary) or complete output (JSON)

    $ serrano funders 100004410

    id: 100004410
    \x5name: European Molecular Biology Organization
    \x5location: Germany

    $ serrano funders "10.13039/100000001,10.13039/100000015"

    id: 100000001
    \x5name: National Science Foundation
    \x5location: United States

    id: 100000015
    \x5name: U.S. Department of Energy
    \x5location: United States

    $ serrano funders "10.13039/100000001,10.13039/100000015" --json=true | jq .[].message.name

    "National Science Foundation"
    \x5"U.S. Department of Energy"

    $ serrano funders --query=NSF --limit=2

    $ serrano funders 10.13039/100000001 --works=true --limit=2
  LONGDESC
  option :json, type: :boolean, default: false
  option :query, type: :string, default: nil
  option :limit, type: :numeric, default: nil
  option :works, type: :boolean, default: false
  def funders(ids = nil)
    if ids.nil?
      out = Serrano.funders(query: options[:query], limit: options[:limit],
                            works: options[:works])
    else
      out = Serrano.funders(ids: ids.split(','), query: options[:query], limit: options[:limit],
                            works: options[:works])
    end

    if !options[:json]
      if !options[:works]
        out = if out.class == Hash
                out['message']['items']
              else
                out.collect { |x| x['message'] }
              end

        out.each do |x|
          puts 'id: ' + x['id']
          puts 'name: ' + x['name']
          puts 'location: ' + x['location']
          puts
        end
      else
        print_works(out)
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc 'journals [journal ISSNs]', 'Search for journals by ISSNs'
  long_desc <<-LONGDESC
    `serrano journals` accepts one or more journal ISSNs

    Toggle `json` to get simplified (summary) or complete output (JSON)

    $ serrano journals 2167-8359

    id: 100004410
    \x5name: European Molecular Biology Organization
    \x5location: Germany

    $ serrano journals "1803-2427,2326-4225"

    id: 100000001
    \x5name: National Science Foundation
    \x5location: United States

    id: 100000015
    \x5name: U.S. Department of Energy
    \x5location: United States

    $ serrano journals "1803-2427,2326-4225" --json=true | jq .[].message.title

    "National Science Foundation"
    \x5"U.S. Department of Energy"

    $ serrano journals --query=ecology --limit=2

    $ serrano journals 2167-8359 --query=ecology --works=true --limit=2
  LONGDESC
  option :json, type: :boolean, default: false
  option :query, type: :string, default: nil
  option :limit, type: :numeric, default: nil
  option :works, type: :boolean, default: false
  def journals(ids = nil)
    if ids.nil?
      out = Serrano.journals(query: options[:query], limit: options[:limit],
                             works: options[:works])
    else
      out = Serrano.journals(ids: ids.split(','), query: options[:query], limit: options[:limit],
                             works: options[:works])
    end

    if !options[:json]
      if !options[:works]
        out = if out.class == Hash
                out['message']['items']
              else
                out.collect { |x| x['message'] }
              end

        out.each do |x|
          puts 'ISSN: ' + x['ISSN'][0]
          puts 'title: ' + x['title']
          puts 'publisher: ' + x['publisher']
          puts
        end
      else
        print_works(out)
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc 'types [type name]', 'Search for types by name'
  long_desc <<-LONGDESC
    `serrano types` accepts one or more type names

    Toggle `json` to get simplified (summary) or complete output (JSON)

    $ serrano types journal

    id: 100004410
    \x5name: European Molecular Biology Organization
    \x5location: Germany

    $ serrano types journal dissertation

    id: 100000001
    \x5name: National Science Foundation
    \x5location: United States

    id: 100000015
    \x5name: U.S. Department of Energy
    \x5location: United States

    $ serrano types journal dissertation --json=true | jq .[].message

    "National Science Foundation"
    \x5"U.S. Department of Energy"

    $ serrano types dissertation --works

    $ serrano types dissertation --works --limit=2
  LONGDESC
  option :json, type: :boolean, default: false
  option :works, type: :boolean, default: false
  option :limit, type: :numeric, default: nil
  def types(*ids)
    out = Serrano.types(ids: ids, limit: options[:limit],
                        works: options[:works])

    if !options[:json]
      if !options[:works]
        out = if out.class == Hash
                out['message']['items']
              else
                out.collect { |x| x['message'] }
              end

        out.each do |x|
          puts 'id: ' + x['id']
          puts 'label: ' + x['label']
          puts
        end
      else
        print_works(out)
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc 'licenses', 'Search for licenses by name'
  long_desc <<-LONGDESC
    `serrano licenses` accepts one or more type names

    Toggle `json` to get simplified (summary) or complete output (JSON)

    $ serrano licenses

    url: http://avs.org
    \x5work-count: 1

    url: http://creativecommons.org/LICENSEs/by/3.0/
    \x5work-count: 14

    $ serrano licenses --query=creative

    id: 100000001
    \x5name: National Science Foundation
    \x5location: United States

    id: 100000015
    \x5name: U.S. Department of Energy
    \x5location: United States

    $ serrano licenses --json=true | jq .message.items[]

    "National Science Foundation"
    \x5"U.S. Department of Energy"
  LONGDESC
  option :json, type: :boolean, default: false
  option :query, type: :string, default: nil
  def licenses
    out = Serrano.licenses(query: options[:query])
    if !options[:json]
      out = out['message']['items']
      out.each do |x|
        puts 'url: ' + x['URL']
        puts 'work-count: ' + x['work-count'].to_s
        puts
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc 'contneg', 'Content negotiation'
  long_desc <<-LONGDESC
    `serrano contneg` accepts a DOI

    $ serrano contneg 10.1890/13-0590.1

    Murtaugh, P. A. (2014).  In defense of P values . Ecology, 95(3), 611–617. doi:10.1890/13-0590.1

    $ serrano contneg 10.1890/13-0590.1 --style=heredity

    Murtaugh PA (2014).  In defense of P values . Ecology 95: 611–617.
  LONGDESC
  option :format, type: :string, default: 'text'
  option :style, type: :string, default: 'apa'
  option :locale, type: :string, default: 'en-US'
  def contneg(ids)
    puts Serrano.content_negotiation(ids: ids, format: options[:format], style:
      options[:style], locale: options[:locale])
  end

  desc 'version', 'Get serrano version'
  def version
    puts Serrano::VERSION
  end

  private

  def print_works(data)
    data = if data.is_a? Array
             data[0]['message']['items']
           else
             data.collect { |x| x['message'].select { |k, _v| k[/DOI|type|title/] } }
           end
    data.each do |x|
      puts 'DOI: ' + x['DOI']
      puts 'type: ' + x['type']
      puts 'title: ' + x['title'][0]
      puts
    end
  end
end

Sr.start(ARGV)
